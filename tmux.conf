# #############################################################################
# Appearance
# #############################################################################

# A nice status bar
set -g status-bg blue
set -g status-fg white
set -g status-utf8 on
set -g status-right-length 50
set -g status-right '#(free -h | grep "buffers/cache" | awk "{print \\$3}") / #(free -h | grep "Mem:" | awk "{print \\$2}") | #(uptime | awk "{print \\$\(NF-2\) \\$\(NF-1\) \\$NF}" | sed "s/,/ /g") | #(date "+%I:%M %p") | @#h '

# Current window
set -g window-status-current-bg black
set -g window-status-current-fg white
set -g window-status-current-format ' #I #W#F '

# Non-current window
set -g window-status-format '#I #W#F'

# General pane formatting
set -g pane-border-fg blue
set -g pane-border-bg default

# Current pane formatting
set -g pane-active-border-fg blue
set -g pane-active-border-bg brightblue

# #############################################################################
# Keybindings
# #############################################################################

# Keyboard shortcut to reload our config file.
bind r source-file $HOME/.tmux.conf \; display "Configuration file reloaded"

# Use vim keybindings for navigating the buffer.
set -g mode-keys vi

# Make keybindings for split windows more obvious and memorable. I find tmux's
# naming scheme of a vertical split in a window being called "horizontal"
# confusing.
bind | split-window -h
# So we can lazily hit the above without pressing shift.
bind \ split-window -h
bind - split-window -v

# Use vim movement keys for window pane switching. The -r makes the
# command repeatable within the repeat-time (which is 500 miliseconds by
# default) without having to re-press the PREFIX key(s).
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

# Use (almost) vim movement keys for window pane resizing.
bind -r C-h resize-pane -L 5
bind -r C-j resize-pane -D 5
bind -r C-k resize-pane -U 5
bind -r C-l resize-pane -R 5

# Move windows right or left with Ctrl-Shift-<arrow>.
# Does not require pressing prefix key first.
bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1

# Use (almost) vim keybindings for copy / paste.
# Use the escape key to enter copymode.
unbind [
bind q copy-mode
# Use v and y for visual selection and pasting (yanking).
bind -t vi-copy 'v' begin-selection
bind -t vi-copy 'y' copy-selection
# Use C-p to paste, kinda like in vim.
bind C-p paste-buffer

# Custom prefix key (default is Ctrl-b).
unbind C-b
set -g prefix C-f
bind C-f send-prefix

# Convenient last-* switching.
bind-key C-f last-window
bind C-a last-pane

# #############################################################################
# Miscellaneous
# #############################################################################

# Show pane numbers for longer.
# Allows us to select a pane slower, which is nice.
set -g display-panes-time 2000

# More history
set -g history-limit 10000

# Set status line update interval (default is every 15 seconds).
set -g status-interval 15

# tmux waits one second after pressing escape to actually send the esape key
# because it's waiting to see if you hit more keys for an escape mapping. This
# can be somewhat annoying when using things like vim. Let's turn that time out
# to zero.
set -g escape-time 0

# Turn off all mouse interactions with the window. This can be handy but more
# often than not causes undesired behavior e.g. clicking on terminal changes
# window pane.
setw -g mode-mouse off

# Start window and pane numbering from 1.
set -g base-index 1
setw -g pane-base-index 1

# Re-number windows if one is closed.
set -g renumber-windows on

# Instructs tmux to expect UTF-8 sequences to appear in this window.
set -g utf8 on

# Load our work-only config, if it's present.
if-shell "[ -f $HOME/.tmux.conf.work ]" "source-file $HOME/.tmux.conf.work"
